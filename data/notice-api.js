// Generated by CoffeeScript 1.8.0
(function() {
  var NotesManagement, db_callback, get_db_manager;

  get_db_manager = function() {
    var exDB;
    exDB = function() {
      var self, sendMessage;
      self = this;
      this.extensionId = arguments[0] || "eojllnbjkomphhmpcpafaipblnembfem";
      this.filterList = new Array();
      this._table;
      this._query;
      self.sendMessage = sendMessage = function(data, callback) {
        chrome.runtime.sendMessage(self.extensionId, data, callback);
      };
      self.open = function(params, callback) {
        self.sendMessage({
          cmd: "open",
          params: params
        }, function(r) {
          var i, tn;
          tn = void 0;
          i = 0;
          while (i < r.length) {
            tn = r[i];
            i++;
          }
          self.__defineGetter__(tn, function() {
            self._table = tn;
            return this;
          });
          callback();
        });
        return self;
      };
      self.close = function(callback) {
        self.sendMessage({
          cmd: "close",
          params: {}
        }, callback);
        return self;
      };
      self.table = function(name) {
        self._table = name;
        return self;
      };
      self.query = function() {
        self._query = arguments;
        return self;
      };
      self.execute = function(callback) {
        self.sendMessage({
          cmd: "execute",
          table: self._table,
          query: self._query,
          filters: self.filterList
        }, function(result) {
          if (result && result.RUNTIME_ERROR) {
            console.error(result.RUNTIME_ERROR.message);
            result = null;
          }
          callback(result);
        });
        self._query = null;
        self.filterList = [];
      };
      self.getUsageAndQuota = function(callback) {
        self.sendMessage({
          cmd: "getUsageAndQuota"
        }, callback);
      };
      "add update remove get".split(" ").forEach(function(fn) {
        self[fn] = function(item, callback) {
          self.sendMessage({
            cmd: fn,
            table: self._table,
            params: item
          }, function(result) {
            if (result && result.RUNTIME_ERROR) {
              console.error(result.RUNTIME_ERROR.message);
              result = null;
            }
            callback(result);
          });
          return self;
        };
      });
      "all only lowerBound upperBound bound filter desc distinct keys count".split(" ").forEach(function(fn) {
        self[fn] = function() {
          self.filterList.push({
            type: fn,
            args: arguments
          });
          return self;
        };
      });
    };
    "use strict";
    return exDB();
  };

  db_callback = function(r) {};

  document.test_func = function() {
    console.log("test_func entered...");
  };

  NotesManagement = function(request_manager_instance, ui_manager_instance) {
    this.request_manager = request_manager_instance;
    this.table_prefix = String(this);
    this.table_tags = this.table_prefix + "tags";
    this.table_jobs = this.table_prefix + "jobs";
    this.table_notes = this.table_prefix + "notes";
    this.storage_name = "NotesDB";
    this.db_manager = get_db_manager();
    this.init_db();
    this.ui_manager = ui_manager_instance;
  };

  NotesManagement.prototype.notice_error = function(error_message) {};

  NotesManagement.prototype.init_db = function() {
    this.db_manager.open({
      server: this.storage_name,
      version: 1,
      schema: {
        table_tags: {
          key: {
            keyPath: "id",
            autoIncrement: true
          },
          indexes: {
            name: {
              unique: true
            }
          }
        },
        table_jobs: {
          key: {
            keyPath: "id",
            autoIncrement: true
          },
          indexes: {
            name: {
              unique: true
            },
            start: {},
            stop: {}
          }
        },
        table_notes: {
          key: {
            keyPath: "id",
            autoIncrement: true
          },
          indexes: {
            name: {},
            url: {},
            text: {},
            tags: {},
            jobs: {}
          }
        }
      }
    }, db_callback);
  };

  NotesManagement.prototype.add_tag = function(tag_name) {
    this.db_manager.table(this.table_tags).add({
      name: tag_name
    }, db_callback);
  };

  NotesManagement.prototype.remove_tag = function(tag_name) {
    this.db_manager.table(this.table_tags).query("name").only(tag_name).execute(function(r) {
      this.db_manager.table(this.table_tags).remove({
        id: r.id
      }, db_callback);
    });
  };

  NotesManagement.prototype.list_tags = function() {
    var get_tags;
    get_tags = function(callback) {
      this.db_manager.table(this.table_tags).query("name").all().execute(callback);
    };
    this.get_tags(db_callback);
  };

  NotesManagement.prototype.fuzzy_tags = function(tag_name_part) {};

  NotesManagement.prototype.add_job = function(job_nane) {};

  NotesManagement.prototype.remove_job = function(job_nane) {};

  NotesManagement.prototype.get_jobs = function(callback) {};

  NotesManagement.prototype.list_jobs = function() {};

  NotesManagement.prototype.fuzzy_tags = function(job_name_part) {};

  NotesManagement.prototype.save_selected_text = function(selected_text) {};

  NotesManagement.prototype.get_selections = function(callback) {};

  NotesManagement.prototype.list_selections = function() {};

  NotesManagement.prototype.fuzzy_selections = function(selection_name_part) {};

  NotesManagement.prototype.render_report_by_tag = function(tag_name) {};

  NotesManagement.prototype.render_report_by_job = function(job_nane) {};

  document.get_notes_management = function() {
    console.log("Getting NotesManagement...");
    return NotesManagement;
  };

}).call(this);
